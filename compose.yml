services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-assistant-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/ai_assistant
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      CARTESIA_API_KEY: ${CARTESIA_API_KEY}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      VIDEOSDK_API_KEY: ${VIDEOSDK_API_KEY}
      VIDEOSDK_SECRET: ${VIDEOSDK_SECRET}
      VIDEOSDK_AUTH_TOKEN: ${VIDEOSDK_AUTH_TOKEN}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      LUMA_API_KEY: ${LUMA_API_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-secret-key}
      PHI_ENCRYPTION_KEY: ${PHI_ENCRYPTION_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    ports:
      - "9500:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-assistant-network

  # CoAgent Runtime
  coagent-runtime:
    build:
      context: .
      dockerfile: docker/Dockerfile.coagent-runtime
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      CARTESIA_API_KEY: ${CARTESIA_API_KEY}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY}
      COAGENT_RUNTIME_PORT: 4000
      NODE_ENV: production
    ports:
      - "9501:4000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-assistant-network

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    environment:
      VITE_COPILOT_RUNTIME_URL: http://localhost:9501/copilotkit
    ports:
      - "9502:80"
    depends_on:
      backend:
        condition: service_healthy
      coagent-runtime:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-assistant-network


volumes:
  postgres_data:
    driver: local

networks:
  ai-assistant-network:
    driver: bridge